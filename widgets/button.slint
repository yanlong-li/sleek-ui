export enum ButtonSize { Default,Medium ,Small ,Mini }
export enum ButtonType { Default,Primary,Success,Info,Warning,Danger }
export enum ButtonRound { Default,Round,Circle}
import { Theme,Themes } from "../themes/index.slint";

export component Button inherits Rectangle {
    themes := Themes { }

    in property <ButtonSize> size: Default;
    in property <ButtonType> type: Default;
    in property <string> text: "";
    in property <ButtonRound> round: Default;
    in property <bool> disabled: false;
    callback clicked();
    in property <color> background-color;
    in property <bool> plain: false;
    in property <image> icon;
    in property <Theme> theme: themes.theme;
    height: size == ButtonSize.Medium ? 36px : size == ButtonSize.Small ? 32px : size == ButtonSize.Mini ? 28px : 40px;
    width: self.round == ButtonRound.Circle ? self.height : txt.preferred-width + 24px;
    border-radius: round == ButtonRound.Default ? 8px : round == ButtonRound.Round ? self.height / 2 : self.height / 2;
    border-width: 1px;
    border-color: calcBordeColor();
    background: calcBackground();
    txt := Text {
        text: text;
        visible: text != "";
        color: calcTextColor();
        font-size: size == ButtonSize.Medium ? 16px : size == ButtonSize.Small ? 14px : size == ButtonSize.Mini ? 12px : 18px;
    }

    Image {
        source: icon;
        visible: icon.width > 0 && icon.height > 0;
        width: parent.width * 60%;
        height: parent.width * 60%;
    }

    ta := TouchArea {
        clicked => {
            if (!disabled) {
                clicked();
            }
        }
    }

    function calcBackground() -> color {
        if (disabled) {
            if (plain) {
                if (type == ButtonType.Primary) {
                    return theme.Colors.PrimaryThird;
                }
                if (type == ButtonType.Success) {
                    return theme.Colors.SuccessThird;
                }
                if (type == ButtonType.Info) {
                    return theme.Colors.InfoThird;
                }
                if (type == ButtonType.Warning) {
                    return theme.Colors.WarningThird;
                }
                if (type == ButtonType.Danger) {
                    return theme.Colors.DangerThird;
                }
            }
            if (type == ButtonType.Primary) {
                return theme.Colors.PrimarySecound;
            }
            if (type == ButtonType.Success) {
                return theme.Colors.SuccessSecound;
            }
            if (type == ButtonType.Info) {
                return theme.Colors.InfoSecound;
            }
            if (type == ButtonType.Warning) {
                return theme.Colors.WarningSecound;
            }
            if (type == ButtonType.Danger) {
                return theme.Colors.DangerSecound;
            }
            return theme.Colors.Back;
        }
        if (plain) {
            if (type == ButtonType.Primary) {
                return theme.Colors.PrimarySecound;
            }
            if (type == ButtonType.Success) {
                return theme.Colors.SuccessSecound;
            }
            if (type == ButtonType.Info) {
                return theme.Colors.InfoSecound;
            }
            if (type == ButtonType.Warning) {
                return theme.Colors.WarningSecound;
            }
            if (type == ButtonType.Danger) {
                return theme.Colors.DangerSecound;
            }
            return theme.Colors.Back;
        }
        if (type == ButtonType.Primary) {
            return theme.Colors.Primary;
        }
        if (type == ButtonType.Success) {
            return theme.Colors.Success;
        }
        if (type == ButtonType.Info) {
            return theme.Colors.Info;
        }
        if (type == ButtonType.Warning) {
            return theme.Colors.Warning;
        }
        if (type == ButtonType.Danger) {
            return theme.Colors.Danger;
        }
        return theme.Colors.Back;
    }
    function calcTextColor() -> color {
        if (disabled) {
            if (plain) {
                if (type == ButtonType.Primary) {
                    return theme.Colors.PrimarySecound;
                }
                if (type == ButtonType.Success) {
                    return theme.Colors.SuccessSecound;
                }
                if (type == ButtonType.Info) {
                    return theme.Colors.InfoSecound;
                }
                if (type == ButtonType.Warning) {
                    return theme.Colors.WarningSecound;
                }
                if (type == ButtonType.Danger) {
                    return theme.Colors.DangerSecound;
                }
                return theme.Colors.Placeholder;
            }
            return type == ButtonType.Default ? theme.Colors.Placeholder : theme.Colors.Back;
        }
        if (plain) {
            if (type == ButtonType.Primary) {
                return theme.Colors.Primary;
            }
            if (type == ButtonType.Success) {
                return theme.Colors.Success;
            }
            if (type == ButtonType.Info) {
                return theme.Colors.Info;
            }
            if (type == ButtonType.Warning) {
                return theme.Colors.Warning;
            }
            if (type == ButtonType.Danger) {
                return theme.Colors.Danger;
            }
            return type == ButtonType.Default ? theme.Colors.Front : theme.Colors.Back;
        }
        return type == ButtonType.Default ? theme.Colors.Front : theme.Colors.Back;
    }
    function calcBordeColor() -> color {
        if (disabled) {
            if (type == ButtonType.Primary) {
                return theme.Colors.PrimarySecound;
            }
            if (type == ButtonType.Success) {
                return theme.Colors.SuccessSecound;
            }
            if (type == ButtonType.Info) {
                return theme.Colors.InfoSecound;
            }
            if (type == ButtonType.Warning) {
                return theme.Colors.WarningSecound;
            }
            if (type == ButtonType.Danger) {
                return theme.Colors.DangerSecound;
            }
            return theme.Colors.Placeholder;
        }
        if (plain) {
            if (type == ButtonType.Primary) {
                return theme.Colors.Primary;
            }
            if (type == ButtonType.Success) {
                return theme.Colors.Success;
            }
            if (type == ButtonType.Info) {
                return theme.Colors.Info;
            }
            if (type == ButtonType.Warning) {
                return theme.Colors.Warning;
            }
            if (type == ButtonType.Danger) {
                return theme.Colors.Danger;
            }
            return theme.Colors.Front;
        }
        return type == ButtonType.Default ? theme.Colors.Front : theme.Colors.Back;
    }
}
